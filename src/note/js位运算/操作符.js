/**
 * 位运算直接对内存数据进行操作，因此处理速度非常快
 */

/**
 * 按位非 NOT（~）
 * 对原数值取反并减1
 * 双非取整
 *      ~~3.14 = 3
 */

/**
 * 按位与 AND（&）
 * 两个操作数 相应的位 都为1时 结果为1 否则为0
 * & 判断奇偶数
 *      偶数 & 1 = 0; 奇数 & 1 = 1
 * 判断数字是否为2的整数幂
 *      a & (a - 1) = 0 a是2的整数幂
 */

/**
 * 按位或 OR（|）
 * 两个操作数 相应的位 只要有一个1 结果为1; 两个都是0 结果才为0
 * 取整
 *      2.234 | 0 = 2
 * 代替 Math.round()
 *      正数 + 0.5 负数 -0.5 再进行取整
 */

/**
 * 按位异或 XOR（^）
 * 两个操作数 相应的位 有且只有一位是1时 结果为1，其余都是0
 * 判断两个整数是否相等
 *      2 ^ 2 = 0   3.14 ^ 3.99 = 0
 * 进行值交换
 *      let a = 1
        let b = 2
        a ^= b
        b ^= a
        a ^= b
        console.log(a)   // 2
        console.log(b)   // 1
 * 切换0和1
        变量为0时，变成1；变量为1时，变成0；
        let toggle = 0; toggle = toggle ? 0 : 1;
        toggle ^= 1; toggle = toggle ^ 1
 * 判断两数符号是否相同
        同为正 或 同为负
        let a = 1
        let b = 2
        let c = -2
        (a ^ b) >= 0 // true
        (a ^ c) >= 0 // false
 */

/**
 * 左移（<<）
 * 数字x左移y位 得到公式：
 *      x << y === x * (z ** y)
 * 取整
 *      3,14 << 0 = 3
 */

/**
 * 有符号右移（>>）
 * 数字x右移y位 得到公式：
 *      x >> y === x / (2 ** y)
 * 取整
 *      3,14 >> 0 = 3
 */

/**
 * 无符号右移（>>>）
 * 正数的 有符号右移 和 无符号右移 都是一样的
 * 负数的无符号右移总是正数
 * 取整（正数）
 *      3.14 >>> 0
 */
